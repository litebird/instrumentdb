# Generated by Django 3.0.3 on 2020-02-29 08:57

import browse.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Entity",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this entity", max_length=256
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="browse.Entity",
                    ),
                ),
            ],
            options={"abstract": False,},
        ),
        migrations.CreateModel(
            name="FormatSpecification",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "document_ref",
                    models.CharField(
                        help_text="ID of the technical document",
                        max_length=64,
                        unique=True,
                        verbose_name="ID of the specification document",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the document containing the specification for a file format",
                        max_length=256,
                    ),
                ),
                (
                    "doc_file",
                    models.FileField(
                        blank=True,
                        help_text="Downloadable copy of the specification document (optional)",
                        null=True,
                        upload_to=browse.models.format_spec_directory_path,
                        verbose_name="file containing the specification document",
                    ),
                ),
                (
                    "doc_file_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the file containing the specification document (optional)",
                        max_length=256,
                        null=True,
                        verbose_name="name of the file containing the specification document",
                    ),
                ),
                (
                    "doc_mime_type",
                    models.CharField(
                        choices=[
                            ("text/plain", "Plain text"),
                            ("text/html", "HTML"),
                            ("application/pdf", "Adobe PDF"),
                            ("text/rtf", "Rich-Text Format (.rtf)"),
                            ("text/markdown", "Markdown"),
                            ("application/x-abiword", "AbiWord document"),
                            ("application/msword", "Microsoft Word (.doc)"),
                            (
                                "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                "Microsoft Word (.docx)",
                            ),
                            ("application/vnd.amazon.ebook", "Amazon Kindle eBook"),
                            ("application/epub+zip", "Electronic publication (EPUB)"),
                            (
                                "application/vnd.oasis.opendocument.text",
                                "OpenDocument text document (.odt)",
                            ),
                            (
                                "application/vnd.oasis.opendocument.presentation",
                                "OpenDocument presentation document (.odp)",
                            ),
                            (
                                "application/vnd.oasis.opendocument.spreadsheet",
                                "OpenDocument spreadsheet document (.ods)",
                            ),
                            (
                                "application/vnd.ms-powerpoint",
                                "Microsoft PowerPoint (.ppt)",
                            ),
                            (
                                "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                                "Microsoft PowerPoint (.pptx)",
                            ),
                            ("application/vnd.ms-excel", "Microsoft Excel (.xls)"),
                            (
                                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                                "Microsoft Excel (.xlsx)",
                            ),
                            ("application/octet-stream", "Other (unknown)"),
                        ],
                        default="text/plain",
                        help_text="This specifies the MIME type of the downloadable copy of the specification document",
                        max_length=256,
                        verbose_name="MIME type of the specification document",
                    ),
                ),
                (
                    "file_mime_type",
                    models.CharField(
                        help_text="This specifies the MIME type of the data file",
                        max_length=256,
                        verbose_name="MIME type of the file",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Quantity",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this quantity", max_length=256
                    ),
                ),
                (
                    "format_spec",
                    models.ForeignKey(
                        help_text="Reference to the format specification used for data files associated with this quantity",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quantities",
                        to="browse.FormatSpecification",
                    ),
                ),
                (
                    "parent_entity",
                    models.ForeignKey(
                        help_text="Entity to whom this quantity is related",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="quantities",
                        to="browse.Entity",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DataFile",
            fields=[
                (
                    "uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="noname",
                        help_text="Name of the file",
                        max_length=1024,
                        verbose_name="file name",
                    ),
                ),
                (
                    "upload_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="Date when the file was added to the database",
                        verbose_name="date when the file was uploaded",
                    ),
                ),
                (
                    "metadata",
                    models.TextField(
                        blank=True,
                        help_text="JSON record containing metadata for the file",
                        max_length=8192,
                        verbose_name="JSON-formatted metadata",
                    ),
                ),
                (
                    "file_data",
                    models.FileField(
                        blank=True,
                        help_text="File contents (when present)",
                        upload_to=browse.models.data_file_directory_path,
                        verbose_name="File",
                    ),
                ),
                (
                    "spec_version",
                    models.CharField(
                        help_text="Version number of the format specification document",
                        max_length=32,
                        verbose_name="version of the specification document",
                    ),
                ),
                (
                    "plot_file",
                    models.FileField(
                        blank=True,
                        help_text="Plot of the data in the file (optional)",
                        upload_to=browse.models.plot_file_directory_path,
                        verbose_name="Image file",
                    ),
                ),
                (
                    "plot_mime_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("image/png", "PNG image"),
                            ("image/jpeg", "Jpeg image"),
                            ("image/svg+xml", "SVG image"),
                            ("image/apng", "Animated PNG"),
                            ("image/bmp", "Windows bitmap image"),
                            ("image/gif", "GIF image"),
                            ("image/x-icon", "ICO image"),
                            ("image/tiff", "TIFF image"),
                            ("image/webp", "WebP image"),
                            ("application/octet-stream", "Other (unknown)"),
                        ],
                        default=None,
                        help_text="This specifies the MIME type of the image",
                        max_length=256,
                        null=True,
                        verbose_name="MIME type of the image",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True, help_text="Free-form notes", max_length=4096
                    ),
                ),
                (
                    "dependencies",
                    models.ManyToManyField(
                        blank=True,
                        help_text="List of data files that have been used as inputs to produce this data file",
                        to="browse.DataFile",
                    ),
                ),
                (
                    "quantity",
                    models.ForeignKey(
                        help_text="Quantity associated with the data in this file",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_files",
                        to="browse.Quantity",
                    ),
                ),
            ],
        ),
    ]
